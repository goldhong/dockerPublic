docker的使用：
----------------------------------------------------------------------
永久关闭selinux,可以修改配置文件/etc/selinux/config,将其中SELINUX设置为disabled  

----------------------------------------------------------------------
route 设置  
route add ip gw   
route del 


-----------------------------------------------------------------------
自建镜像资源 https://openvz.org
docker镜像模板下载地址  https://openvz.org/Download/template/precreated
#cat centos7.0-64-x86.tar.gz |docker import - centos:7.0-64

存出镜像
docker save -o centos:7.0-64.tar centos:7.0-64

载入镜像
#docker load --input centos_7.0-64.tar
或 #docker load < centos_7.0-64.tar

自建私有化仓库
#docker run -d -p 5000:5000 registry   //自动下载并创建一个registry容器，并将其作为本地的私有仓库
#docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry    //把默认创建的的目录修改到指定的目录下，以后上传的镜像文件将会存在指定路径，监听端口为5000
-----------------------------------------------------------------------
宿主机建议使用centos7.1以上版本（因为需要linux内核3.8以上才行）
centos7.1安装ifconfig、netstat、route
yum provides/whatprovides     //查找哪个软件包提供相关请求的相关内容
yum install net-tools    //安装ifconfig\netstat
yum install traceroute   //安装route
注意：centos7 上 ip addr 即 ifconfig    /   ss 即 netstat   例如 #ss -lt #ss -ul #ss -t   /  tracepath 即 traceroute/traceroute6   / ip route 即 route  /  ip neighbor 即 arp  /网卡接口开关 ip l set eth1 up/down  即 ifconfig eth1 up/down
------------------------------------------------------------------------
centos7最小化安装完以后必须要做的事情【开启网卡】

ip link set dev eth0 up  #开启eth0

配置eth0里面的ificfg-eth0的onboot、ip\dns\gatway等


IPADDR="192.168.1.105"
PREFIX="24"
GATEWAY="192.168.1.1"
DNS1="114.114.114.114"
DNS2=""

关闭/etc/selinux/config


service network restart


ping www.baidu.com


修改host名字 echo $HOSTNAME  #hostname在/etc/hostname



yum -y update && yum -y upgrade  #更新安装已有的软件最新版本以及安全升级，不会安装任何新的软件



yum install links  #安装web浏览器



firewall-cmd --zone=dmz --add-port=443/tcp --permanent   #永久开启443端口

firewall-cmd --zone=dmz --add-port=80/tcp --permanent    #永久开启80端口




yum install epel-release  #为企业版的添加第三方库，或者使用社区企业版的   yum install epel-release


yum install wget -y


yum install gcc gcc-c++ -y


yum install nmap -y



yum install curl -y


yum install lrzsz -y


yum install net-tools traceroute -y

yum install vim -y

yum install telnet -y


yum install git -y  #如果上面的源更新，那git的依赖会被直接安装

yum install gzip
yum install vsftpd     #安装 Vsftpd FTP 服务器


yum install bridge-utils   #安装网桥插件
【注】以上可以  yum install wget git gcc gcc-c++ nmap lrzsz net-tools traceroute vim telnet gzip vsftpd bridge-utils -y

yum install p7zip   #安装p7zip该软件包从 Fedora EPEL 7 的库中下载和安装。


yum install rkhunter -y   #rkhunter --check   可以扫描有害的攻击，也要从第三方库下载



wget http://prdownloads.sourceforge.net/webadmin/webmin-1.740-1.noarch.rpm    #rpm -ivh webmin-*.rpm 安装webmin可以配置linux的各种系统



———————————————————————————————

安装owncloud
wget https://download.owncloud.org/community/owncloud-9.1.0.tar.bz2

安装lamp   
http://teddysun.com/lamp


下载完成的源码拷贝至网站根目录后，执行以下命令解压:
tar -jxf owncloud-5.0.5.tar.bz2

赋予权限才能创建data目录（以/data/www/default/owncloud/目录为例）：
chown -R apache:apache /data/www/default/owncloud/

浏览器打开网址执行安装步骤：

安装桌面同步或移动客户端等
打开链接：http://owncloud.org/install/，有适用于Windows, Mac OS X， Linux， iOS， Android客户端。选择下载，安装即可。



注：参考页面  http://jjliu.blog.ustc.edu.cn/198/
-------------------------------------------------------------------





————————————————————
-----------------
宿主机为centos7中的docker安装、使用、配置等
vim  /etc/resolv.conf 
 #查看dns
yum install docker  -y //安装docker
service docker start/restart   //启动docker
chkconfig docker on  //开启开机自启动docker
docker version   //查询docker的版本号
docker search <image>     //在docker index中搜索image
docker info    //查看系统(docker)层面信息，包括管理的images, containers数等
docker pull <image>     //从docker registry server 中下拉image
docker pull <image>   //从docker registry server 中下拉image
docker images   //列出images  
    
docker images -a //列出所有的images（包含历史）  
    
docker images --tree //显示镜像的所有层(layer)  
    
docker rmi <image ID> //删除一个或多个image 

docker run <image ID> /bin/bash  //开启并进入一个容器
docker start <container…>  //启动一个已经建好的容器
docker ps    //列出当前所有正在运行的container
docker ps -l    //列出最近一次启动的container
docker ps -a    //列出所有的container（包含历史，即运行过的container）
docker ps -q    //列出最近一次运行的container ID
docker rm <container...>   //删除一个或多个container     
docker rm `docker ps -a -q`     //删除所有的container 
    
docker ps -a -q | xargs docker rm   //同上, 删除所有的container
docker commit <container-id> <image-name>    //把一个正在运行的容器变成一个新的镜像
docker exec -it <imagesID> /bin/bash   //从宿主机进入容器
docker attach <container…>


docker import centos7.tar   //本地导入镜像方法1
cat centos7.tar |docker import - centos7  //本地导入镜像方法2：把centos7.tar镜像导入到容器并命名容器名centos7
docker export <container-id> >centos7.tar    //docker导出容器的镜像为centos7.tar
docker run centos yum install ntpdate  //在centos容器中安装ntpdate程序
docker run -it docker.io/nickistre/centos-lamp /bin/bash    //启动一个容器，用/bin/bash

docker save <IMAGEID> > /home/aa.tar  //保存镜像生成新文件tar
docker load < /home/aa.tar   //加载打包好的镜像
docker build -t aa /home/aa.tar   //构建自己的镜像   docker build -t <镜像名> <镜像文件路径>  
scp -r /home/aa.tar root@192.168.1.65:/home/aa.tar     //拷贝文件到另一机器

docker run -d -p 81:80 -p 8022:22 <imagesID>  //-d在后台启动一个容器
docker run --name redmine -p 9003:80 -p 9023:22 -d -v /var/redmine/files:/redmine/files -v    /var/redmine/mysql:/var/lib/mysql sameersbn/redmine       //运行一个新容器，同时为它命名、端口映射、文件夹映射。以redmine镜像为例

run -i -t --name sonar -d -link mmysql:db tpires/sonar-server      //一个容器连接到另一个容器&sonar容器连接到mmysql容器，并将mmysql容器重命名为db。这样，sonar容器就可以使用db的相关的环境变量了。

ctrl+p+q #这种方式退出可以不停止容器，使容器继续在后台运行

从bash-4.1#下进入[root@<containerID>/]
bash-4.1#cp /etc/skel/.bash* /root/     #拷贝模块到root下
bash-4.1#su     #进入root
[root@<containerID>/]

docker扩容，docker启动时默认容器空间是10G
方法一    docker -d --storage-opt dm.basesize=20G  #第一种方法，该方法仅适用于新生容器，该参数需要在/etc/sysconfig/docker-storage里面修改DOCKER_STORAGE_OPTIONS="--storage-opt dm.basesize=20G",然后重启docker就行了
方法一    ls -l /dev/mapper/docker-*   #第二种方法，查看mapper设备信息,里面有dm-1  dm-2  dm-0  ，分别找出dm对应的容器，可以进入容器后使用df -h查看到rootfs就是容器ID
dmsetup table docker-*   #查看docker容器卷信息 0 20971520 thin 253:0 35|，看第二个数字，它就是容器设备当前的大小，表示有多少个512-bytes的扇区，这个值就是默认或者设置的容器大小，可以使用$ echo $((15*1024*1024*1024/512))计算出来31457280，然后把第二个数字替换一下，再执行以下命令
echo 0 31457280 thin 253:0 35| dmsetup load docker-*  #把需要的数值替换,docker-*容器卷标信息
dmsetup resume docker-*   #
dmsetup tables docker-*   #
resize2fs /dev/mapper/docker-*  #设置完成
df -h #可以看到rootfs变成了15G



----------------------------------------------------------------
通过建立的网桥来实现容器互联：
1、/etc/init.d/dcoker stop  #停止docker
2、ifconfig docker0 down   #关掉docker0
3、brctl delbr docker0   #删除docker0
4、yum install bridge-utils   #安装bridge扩展，开始增加网桥br0
5、cd /etc/sysconfig/network-scripts/  #进入网络设置文件夹
6、vi ifcfg-eth0 //进入eth0
   BRIDGE=br0  //增加一行BRIDGE=br0
7、vi ifcfg-br0  //创建ifcfg-br0网卡

ifcfg-br0的配置如下（参考）：
DEVICE=br0
ONBOOT=yes
NM_CONTROLLED=no
BOOTPROTO=static
TYPE=Bridge
IPADDR=192.168.1.107
NETMASK=255.255.255.0
GATEWAY=192.168.1.1
---------------------------------------------------------------------
通过route和pipe实现docker桥接，使各容器之间实现通讯，以eth0为例【以下是单网卡的设置方式】

把br0与eth0连接起来
修改ifcfg-eth0如下：
DEVICE=eth0
BOOTPROTO=nono
ONBOOT=yes
TYPE=Ethernet
BOOTPROTO=static
BRIDGE=br0

建立ifcfg-br0如下：
DEVICE="br0"
ONBOOT=yes
NM_CONTROLLED=no
BOOTPROTO=dhcp   #此处也可以设置成static
TYPE=Bridge

service docker stop  #停止docker网卡
ip link set dev docker0 down  #关闭docker0网卡
brctl delbr docker0  #删除docker0

brctl addbr br0  #添加网桥br0
ip link set dev br0 up  #开启br0网桥
ip addr add 192.168.1.3/24 dev br0  #给br0添加ip 【此时会中断网络】
ip addr del 192.168.1.102/24 dev eth0  #清空宿主机网卡eth0的ip【此时往下的是直接在宿主机上操作，非ssh的操作】
brctl addif br0 eth0  #将宿主机网卡eth0挂到br0上
ip route del default  #删除原路由
ip route add default via 192.168.1.1 dev br0  #为br0设置路由
vim /etc/sysconfig/docker-network  (vim /etc/sysconfig/docker)#设置docker服务启动服务参数：DOCKER_NETWORK_OPTIONS="-b=br0"
service docker start  #启动docker

git clone https://github.com/jpetazzo/pipework  #安装pipework
cp ~/pipework/pipework /usr/local/bin/  #拷贝pipework到bin下

docker run -itd --net=none --name=lamp2 centos7 /binbash  #启动一个容器lamp2
pipework br0 lamp2 192.168.1.11/24@192.168.1.88  #给lamp2容器设置一个ip，@后面是网关ip

docker attach lamp2  #进入lamp2容器查看

-----------------------------------------------------------------
静态路由直接写
动态路由yum install quagga

-------------------------------------------------------------

rpm -qa --last  //反序列出安装的软件包和软件以及时间
---------------------------------------------------------

8、vi /etc/sysconfig/docker    //修改这个文件
   other_args="-b=br0"        //在DOCKER_CERT_PATH=/etc/docker前增加这一行
9、ps -ef |grep docker  //查看docker状态
10、docker run -it <IMAGEID> /bin/bash   //启动一个容器
11、docker attach  <container-id>  //docker attach进入一个容器

-------------------------------------------------------------

git clone https://github.com/jpetazzo/pipework

cp ~/pipework/pipework /usr/local/bin/


---------------------------------------------------------------


du -sh [filename]   //查文件大小
df -h     //查看机器的磁盘资源
rz -y     //从本地选择文件上传
sz	  //向本地传送文件，windows系统下载至download文件夹下
yum install lrzsz  //安装sz\rz

---------------------------------------
Linux下libiconv库的安装和使用：
1.编译安装libiconv库
包的下载页面http://www.gnu.org/software/libiconv/
$ ./configure --prefix=/usr/local/iconv/
$ make
$ make install
2.在/usr/local/lib/目录下拷备需要的库文件libcharset.so.1， libiconv.so.2。

-------------------------------------
echo $PATH
yum search ifconfig
--------------------------------------------
http://www.docker.org.cn
http://www.linuxidc.com/Linux/2014-08/105654.htm    //局域网部署Docker--从无到有创建自己的Docker私有仓库

---------------------------------------------
1.进群下载群文件《Docker从入门到实践》
建议centos7部署docker，了解docker基本命令，熟悉docker基本操作。
文档链接：https://www.gitbook.com/book/yeasy/docker_practice
2.免费资源推荐：
亚马逊aws云主机，第一年免费，需绑定信用卡。
http://aws.amazon.com/cn/free/
3.关注管理员(螃蟹)博客：
www.pangxie.space
练习搭建环境
-------------------------------------------------
wget http://182.92.188.163/centos7.tar

------------------------------------------------
安装setup
yum install setuptool -y
yum install ntsysv -y		//(系统服务）
yum install iptables		//(防火墙配置）
yum install system-config-network-tui -y	//（网络服务）
yum install system-config-securitylevel-tui -y

-----------------------------------------------------
更新为centos7的国内yum源
mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
cd /etc/yum.repos.d/
wget http://mirrors.163.com/.help/CentOS7-Base-163.repo
vi CentOS7-Base-163.repo把enable改成1
yum clean all
yum makecache


pkgs.org   //上面有所有的yum源
----------------------------------------------------
netstat -ntulp  #查询哪些端口开放了
nmap -sT <ip>   #查询哪些端口开启了tcp服务
nmap -sU <ip>   #查询哪些端口开启了udp服务
nmap -sP <ip/24>   #查询ip对应的网段有哪些主机在运行
nmap -sV <ip>   #扫描该ip下运行的软件版本信息
nmap -O <ip>   #扫描该ip下服务器上运行的操作系统
nmap -O --osscan-guess <ip>   #扫描该ip下服务器上运行的操作系统，准确度要比简单-O高很多

--------------------------------------------------
实现快速实现ssh连接
【一】关闭selinux
vi /etc/selinux/config
SELINUX=disabled
然后reboot重启！！！！
【二】关闭防火墙并禁止启动，有能力自己玩iptables规则去，我做实验现在没时间深究关闭并禁止启动
systemctl stop firewalld
systemctl disable firewalld
【三】设置网络
网络设置
查看本地网络物理设备名称
nmcli dev status
【注释】每个机器的网卡多少有出入
[root@localhost ~]# nmcli dev status
DEVICE       TYPE      STATE      CONNECTION  
eno16777736  ethernet  connected  eno16777736 
lo           loopback  unmanaged  --          
[root@localhost ~]# 

编辑网卡配置文件为默认启动
/etc/sysconfig/network-scripts/eno16777736 中设置 NM_CONTROLLED=yes
这里使用的dhcp如果使用静态地址请参考下面参考资料大神的文章，我也是搬运工，这个必须承认！
重启网络
systemctl restart network.service
查看ip
ip add
或者使用查看
【四】启动sshd服务
重启sshd
service sshd restart

-------------------------------------------------------
centos7 安装ifconfig
yum search ifconfig  //寻找ifconfig，一般会找到net-tools.x86_64
yum install net-tools.x86_64

--------------------------------------------------------
电脑安装windows和centOS系统 双系统
http://jingyan.baidu.com/article/20b68a88b2077f796cec621b.html

--------------------------------------------------------------------
修改容器密码报错的处理
#passwd
Changing password for user root.
New password: 
/usr/share/cracklib/pw_dict.pwd: No such file or directory
PWOpen: No such file or directory

#rpm -e cracklib-dicts pam --nodeps   //强制卸载cracklib-dicts函数库及依赖包pam
#yum install cracklib-dicts pam   //再把cracklib-dicts和pam重新安装一遍
-----------------------------------------------------------------------
sshd的装、使用、配置

不允许ssh远程到别的机子root登录，需要修改以下：
#vi /etc/ssh/sshd_config   //进入sshd_config修改成PermitRootLogin yes
#/bin/systemctl restart  sshd.service  重启sshd命令
--------------------------------------------------------------------
dockerfile的使用

INSTRUCTION arguments  #忽略大小写
FROM <image>:<tag>
RUN <command>(the command is run in a shell- '/bin/bash -c')   #RUN命令等价于 docker run images command 或者 docker commit container_id

dockerfile文件编写的例子：
#设置基本镜像，后续命令都以这个镜像为基础
FROM centos:v1
#作者信息
MAINTAINER 
#RUN命令会在上面制定的环境里执行任何命令
RUN yum install passwd openssl openssh-server -y
RUN echo '123456'|passwd --stdin root
RUN ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -N"
RUN ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_host_ecdsa_key -N"
RUN sed -i '/^session\s\+required\s\+pam_loginuid.so/s/^/#/'
RUN mkdir -p /root/.ssh && chwon root.root/root && chmod 700 /root/.ssh
#暴露ssh端口22
EXPOSE 22
#设定运行镜像时的默认命令：输出ip，并以daemon方式启动sshd
CMD ip addr ls eth0 | awk'{print $2}' | egrep -o '([0-9]+\.){3}[0-9]+';/usr/sbin/sshd -D    #一个dockerfile里面只会运行最后一个CMD，即使有很多CMD

根据dockerfile来创建镜像
用docker build 根据dockerfile创建镜像(centos:ssh):
docker build -t centos:ssh - < Dockerfile    

--------------------------------------------------------------------
ansible
自动化部署APP；自动化管理配置项；自动化的持续交互；自动化的（AWS）云服务管理。
--------------------------------------------------------------------
rocker网络设置
docker网络模式五种:nono\host\container\bridge\overlay

基本网络模式


---------------------------------------------------------------------
linux防火墙
TCP Wrappers 用于支持哪些服务
/etc/hosts.{allow|deny}

netfilter 是linux的一种功能模块，需要根据不同的软件使用

iptables
防火墙同一个服务的规则顺序非常重要，不同的服务的顺序不受影响
表table  链chain

filter表
iput
output
forward

NAT表
snat postrouting  #源地址转换
dnat prerouting   #目的地址转换
OUTPUT  #服务器自我访问公网地址转换

mangle #流量整形


-A  #添加规则
-D  #删除规则
-I  #插入规则

语法规则
iptables -t filter   -A{I,D}        INPUT{OUTPUT,FORWARD}   {n}    -p tcp{udp,icmp}  {!}  -s 192.168.0.0/24   {-m mac --mac=::::}    --sport m:n              --dport x:y           -j ACCEPT{DROP,REJECT,LOG}
         表名      添加|插入|删除   进入链|出去链|转发链   第n条   协议类型          非   入口网段或ip        根据mac地址            源端口地址m端口到n端口   目的端口地址x到y      接受|丢弃|拒绝|记入日志

service iptables save  #保存iptables的修改

iptables -L -n --line-numbers  #显示防火墙规则，包括行号

-------------------------------------------------------------------
【初级版：docker-deamone自定义制作镜像、存出、导入、生成nginx，下面使用的是c7-mini的gz源】
#把tar.gz文件转成images
cat centos-7-x86_mini.tar.gz | docker import - centos-7-x86_mini
【注意】c7只能c7的container，
#生成、启动并进入container，做好80,443的端口出主机的映射
docker run -it -p 80:80 -p 443:443 <c7/imagesID> /bin/bash
#安装nginx的依赖包
#yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel
#安装nginx【源码安装】,并浏览器测试页面能打开否
wget http://nginx.org/download/nginx-1.11.3.tar.gz
tar zxvf nginx-1.11.3.tar.gz
cd nginx-1.11.3
mkdir /usr/local/nginx
chmod 777 /usr/local/nginx/ 
./configure --prefix=/usr/local/nginx
make && make install
cd /usr/local/nginx 
#生成新的镜像
docker commit <containerID> <imagesNAME>
#存出新生成的镜像
docker save <imagesNAME> > <imagesName.tar>
#移到其他物理空间里
sz <imagesName.tar>
#tar文件到镜像
docker load < <imagesName.tar>
#查看镜像生成情况
docker images






